#!/usr/bin/env ruby
# Turn one or more CSV files into tables in a sqlite3 database.
# 
# This outputs SQL CREATE and INSERT statements that you'll have to pipe into sqlite3.  It should work with other RDBMSes, but I haven't tested.
# 
# Author: Benjamin Oakes <hello@benjaminoakes.com>

require 'csv'
require 'stringio'

csv_files = ARGV[0, ARGV.length]

if csv_files.nil? || csv_files.empty?
  puts "Usage: #{$PROGRAM_NAME} csv_file_1 ... csv_file_n"
  exit(-1)
end

csv_files.each do |csv_file|
  table_name = File.basename(csv_file, '.csv').gsub('-', '_')

  is_first_line = true

  CSV.open(csv_file, 'r') do |row|
    if is_first_line
      puts "create table if not exists #{table_name} (#{row.map { |column_name| column_name.gsub('.', '_').gsub(/\s+/, '_') }.join(', ')});"
      puts
    else
      escaped_values = row.map { |value| value.nil? ? 'NULL' : "'" + value.gsub("'", "\\'") + "'" }
      puts "insert into #{table_name} values (#{escaped_values.join(', ')});"
    end

    is_first_line = false
  end
end
 
