#!/usr/bin/env ruby
# Author: Benjamin Oakes <hello@benjaminoakes.com>

def show_usage
  STDERR.puts <<EOF
Usage: #{$PROGRAM_NAME} [--help | --erb | --sh-comment | pattern]

Delete occurrences of the given pattern from STDIN.  Useful for canned regexes (over say, s/pattern/d in vim).

  --help            Show this help text.
  --erb             Canned:  ERB (embedded Ruby) blocks.
  --non-ascii       Canned:  Non-ASCII characters.
  --sh-comment      Canned:  Shell script comments (Ruby, Perl, Bash, etc.).
  pattern           Create your own regex using PCRE (via Ruby's Regexp).
EOF
  exit(-1)
end

if ARGV.length != 1 || ARGV.any? { |a| '--help' == a }
  show_usage
end

pattern = case ARGV[0]
# FIXME
# when '--blank'
#   /^$/
when '--erb'
  /<%.*?%>/m
when '--sh-comment' # For Ruby, Perl, Bash, etc.
  /#.*$/
when '--non-ascii'
  /[^\x20-\x7E]/ # not [:print:]
else
  Regexp.new(ARGV[0])
end

text = STDIN.readlines.join
puts text.gsub(pattern, '')

# # TODO Idea: replace non-ASCII with similar characters in ASCII.  That probably deserves a command in itself if one doesn't exist already.
# if :non_ascii == pattern
#   # FIXME this probably relies on things that won't work in Ruby 1.9
#   puts text.gsub(/./) do |char|
#     ascii_code = char[0]
# 
#     if ascii_code >= 20 && ascii_code <= 126
#     	char
#     elsif 173 == ascii_code # a type of dash ('-')
#       '-' # Probably used in a bulleted list
#     else
#       ''
#     end
#   end
# else
#   puts text.gsub(pattern, '')
# end

